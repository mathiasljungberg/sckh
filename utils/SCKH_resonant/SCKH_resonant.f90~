program SCKH_resonant
  use parameters
  use KH_functions
  use hist_class
  use SCKH_functions
  use spline_m
  use FFT_m
  implicit none

  ! input/output
  character(80)::pes_file_i, outfile, runmode
  character(80), dimension(:),allocatable:: pes_file_f,pes_file_n, dipolefile_f,dipolefile_n
  integer:: nstates,n_omega_in, n_omega_out, n_theta, nfinal, ninterm
  real(kind=wp):: my, dvr_start_in, dx_in, gamma_FWHM, instrument_FWHM
  real(kind=wp):: omega_in_start, omega_in_end, omega_out_start, omega_out_end, theta_start, theta_end
  !integer:: runmode

  ! loop variables
  integer::i,ii,j, n1,n2,f1,f2,m1,m2,om_in,om_in2, om_out,om_out2, i_theta, traj, fin, t1

  ! other variables
  character(80):: file,string
  real(kind=wp):: my_SI, dx,dvr_start, E_el_i, E_el_f, E_el_n, gamma, alpha, norm 
  real(kind=wp):: F_2_unpol, F_2_theta, instrument_FWHM_time
  integer:: INFO, npoints
  real(kind=wp), dimension(:),allocatable:: W, WORK, X_dvr,E_i_inp, E_i, eig_i
  real(kind=wp), dimension(:),allocatable:: x, omega_in, omega_out
  real(kind=wp), dimension(:,:),allocatable:: Mat_tmp, H_kin, V_dvr, c_i &
       ,eig_n, eig_f, E_n_inp, E_f_inp, E_n, E_f, sigma_unpol, lambda_F, lambda_G, lambda_H
  real(kind=wp), dimension(:,:,:),allocatable:: c_n, c_f, dipole_ni, dipole_nf, D_fi, D_ni, sigma_theta
  real(kind=wp), dimension(:,:,:,:,:),allocatable:: D_fn 
  complex(kind=wp), dimension(:,:),allocatable:: F

  !new stuff
  real(kind=wp),dimension(:),allocatable:: x_sampl, mom_sampl, x_new, time, time2
  real(kind=wp),dimension(:,:),allocatable:: x_mom_sampl
  integer:: ntsteps, ntsteps_pad, ntsteps_pad_pow, ntsteps_half, samplemode
  integer:: npoints_x_sampl, npoints_mom_sampl, npoints_x_mom_sampl, npoints_pes
  real(kind=wp):: delta_t, time_l_in, time_l_out, E_fn_mean, E_fi_mean, nfreq
  type(hist), dimension(:), allocatable:: time_h
  type(hist):: time_h_0, mom_h, time_h_0_mom
  integer, dimension(:), allocatable:: tvector
  real(kind=wp), dimension(:),allocatable:: E_dyn_inp, omega_in_sc, omega_out_sc, sigma_ion_sc
  real(kind=wp), dimension(:,:),allocatable:: sigma_ion_sc_f, sigma_unpol_sc, sigma_unpol_sc_tmp
  integer:: n_omega_in_sc, n_omega_out_sc, nskip, ntsteps2, ntsteps2_pad, ntsteps2_pad_pow
  character(80)::pes_file_dyn
  real(kind=wp):: detector_FWHM

  !
  ! This progam calculates the cross section with the resonant Kramers-Heisenberg formula
  !


  call read_input

  call read_pes

  call solve_eigenfunctions

  if (runmode .eq. "KH") then

    call Kramers_heisenberg_resonant

  else if (runmode .eq. "SCKH") then 

    call SC_Kramers_heisenberg_resonant

  else

    write(6,*) "Error! runmode must be either KH or SCKH"

  end if ! runmode

  write(6,*) "Calculated spectrum"

contains

  subroutine read_input

  !
  ! read input
  !*******************************************************************
  !
  read(5,*) runmode   ! runmode=KH or SCKH
  read(5,*) pes_file_i
  read(5,*) pes_file_dyn
  ! intermediate states
  read(5,*) ninterm  

  allocate(pes_file_n(ninterm), dipolefile_n(ninterm))

  do i=1,ninterm
    read(5,*) pes_file_n(i), dipolefile_n(i)
  end do

  ! final states
  read(5,*) nfinal

  allocate(pes_file_f(nfinal), dipolefile_f(nfinal))

  do i=1,nfinal
    read(5,*) pes_file_f(i), dipolefile_f(i)
  end do

  read(5,*) outfile
  read(5,*) my
  read(5,*) nstates, dvr_start_in, dx_in
  read(5,*) omega_in_start, omega_in_end, n_omega_in 
  read(5,*) omega_out_start, omega_out_end, n_omega_out 
  read(5,*) theta_start, theta_end, n_theta
  read(5,*) gamma_FWHM, instrument_FWHM, detector_FWHM
  read(5,*) samplemode, npoints_x_sampl, npoints_mom_sampl 
  read(5,*) delta_t, ntsteps, ntsteps2 !nskip

  gamma = gamma_FWHM / 2

  npoints_pes = nstates

  write(6,*) "nstates", nstates
  write(6,*) "gamma FWHM =",gamma_FWHM 
  write(6,*) "gamma HWHM =",gamma 

  if(samplemode .eq. 1) then
    npoints_x_mom_sampl = npoints_x_sampl * npoints_mom_sampl
  else if(samplemode .eq. 2) then
    npoints_x_mom_sampl = npoints_x_sampl !* 2 !npoints_x_sampl * npoints_mom_sampl
    npoints_mom_sampl = npoints_x_sampl
  else
    write(6,*) "samplemode muste be either 1 or 2!"
    stop
  end if

  ! allocate everything
  allocate( X_dvr(nstates), E_i_inp(nstates), E_n_inp(ninterm, nstates), &
       E_f_inp(nfinal,nstates), eig_i(nstates),eig_n(ninterm,nstates),eig_f(nfinal,nstates), &
       x(nstates) )

  allocate(V_dvr(nstates,nstates),c_i(nstates,nstates),&
       c_f(nfinal,nstates,nstates),c_n(ninterm,nstates,nstates) )

  allocate(dipole_ni(ninterm, nstates, 3),dipole_nf(nfinal, nstates, 3), D_fn(nfinal,nstates,ninterm,nstates,3), &
       D_ni(ninterm,nstates,3))

  allocate( omega_in(n_omega_in), omega_out(n_omega_out),  F(3,3), sigma_unpol(n_omega_out, n_omega_in),&
       sigma_theta(n_omega_out, n_omega_in, n_theta), lambda_F(nfinal,nstates), lambda_G(nfinal,nstates),lambda_H(nfinal,nstates))

  allocate(E_dyn_inp(nstates)) !XXX make sure this gets in the imput as well 

  allocate(x_sampl(npoints_x_sampl), mom_sampl(npoints_mom_sampl), x_new(ntsteps),&
       time_h(ntsteps), x_mom_sampl(npoints_x_mom_sampl, 2) )

  if (mod(nstates,2).ne.1 ) then
    write(6,*) "nstates must be an odd number"
    stop
  end if

  npoints = (nstates-1)/2
  my_SI = my * amu
  dvr_start = dvr_start_in * 1.0d-10
  dx = dx_in * 1.0d-10

end subroutine read_input

subroutine read_pes

  !
  ! set up DVR points
  !

  do i = -npoints,npoints
    ii = i + npoints +1
    X_dvr(ii) = (ii-1)*dx + dvr_start
  end do


  !
  ! read pes from files
  !

  !initial state
  open(10,file=pes_file_i,status='unknown')

  do i=1,nstates
    read(10,*) x(i), E_i_inp(i)

    ! check that the points match the DVR points
    if (abs(x(i)*1.0d-10-X_dvr(i)) .gt. 1.d-13) then
      write(6,*) "i point x(", i, ")=",x(i),"does not match the DVR point X_dvr(",i,")=",X_dvr(i) 
    end if
  end do

  close(10) 

  ! state for dynamics
  open(10,file=pes_file_dyn,status='unknown')

  do i=1,nstates
    read(10,*) x(i), E_dyn_inp(i)

    ! check that the points match the DVR points
    if (abs(x(i)*1.0d-10-X_dvr(i)) .gt. 1.d-13) then
      write(6,*) "i point x(", i, ")=",x(i),"does not match the DVR point X_dvr(",i,")=",X_dvr(i) 
    end if
  end do

  close(10) 


  ! intermediate states
  do j=1,ninterm

    !pes file
    open(10,file=pes_file_n(j),status='unknown')

    do i=1,nstates
      read(10,*) x(i), E_n_inp(j,i)

      ! check that the points match the DVR points
      if (abs(x(i)*1.0d-10-X_dvr(i)) .gt. 1.d-13) then
        write(6,*) "f",j, " point x(", i, ")=",x(i),"does not match the DVR point X_dvr(",i,")=",X_dvr(i) 
      end if
    end do

    close(10) 

    !dipole file
    open(10,file=dipolefile_n(j),status='unknown')

    do i=1,nstates
      read(10,*) x(i), dipole_ni(j,i,1),dipole_ni(j,i,2),dipole_ni(j,i,3)

      ! check that the points match the DVR points
      if (abs(x(i)*1.0d-10-X_dvr(i)) .gt. 1.d-13) then
        write(6,*) "d",j, "point x(", i, ")=",x(i),"does not match the DVR point X_dvr(",i,")=",X_dvr(i) 
      end if
    end do

    close(10) 

  end do

  ! correct core hole lone pair  PES
  !if( shift_PES .eq.  1 ) then
  !
  !open(10,file=pes_file_lp_corr,status='unknown')
  !
  !  do i=1,nstates
  !     read(10,*) x(i), V_lp_corr(i)
  !
  !     ! check that the points match the DVR points
  !     if (abs(x(i)*1.0d-10-X_dvr(i)) .gt. 1.d-13) then
  !        write(6,*) "corr point x(", i, ")=",x(i),"does not match the DVR point X_dvr(",i,")=",X_dvr(i)
  !     end if
  !  end do
  !
  !close(10)
  !
  !end if

  ! final states
  do j=1,nfinal

    !pes file
    open(10,file=pes_file_f(j),status='unknown')

    do i=1,nstates
      read(10,*) x(i), E_f_inp(j,i)

      ! check that the points match the DVR points
      if (abs(x(i)*1.0d-10-X_dvr(i)) .gt. 1.d-13) then
        write(6,*) "f",j, " point x(", i, ")=",x(i),"does not match the DVR point X_dvr(",i,")=",X_dvr(i) 
      end if
    end do

    close(10) 

    !dipole file, need N * F transitions, !! CHANGE THIS
    open(10,file=dipolefile_f(j),status='unknown')
    do i=1,nstates
      read(10,*) x(i), dipole_nf(j,i,1),dipole_nf(j,i,2),dipole_nf(j,i,3)

      ! check that the points match the DVR points
      if (abs(x(i)*1.0d-10-X_dvr(i)) .gt. 1.d-13) then
        write(6,*) "d",j, "point x(", i, ")=",x(i),"does not match the DVR point X_dvr(",i,")=",X_dvr(i) 
      end if
    end do

    close(10) 

  end do

  write(6,*) "Done reading"

  ! Shift orbital energies so that E_n_inp have energies V_lp_corr
  ! and the spacing between the intermediate and final states are preserved

  !if( shift_PES .eq.  1) then
  !   
  !   shift = V_lp_corr -E_f_inp(1,:) 
  !   
  !   do j=1,nfinal
  !      E_f_inp(j,:) = E_f_inp(j,:) + shift
  !   end do
  !
  !   write(6,*) "Shifted PES:s"
  !
  !end if

  ! use SI units
  E_i_inp = E_i_inp *hartree
  E_dyn_inp = E_dyn_inp *hartree
  E_n_inp = E_n_inp *hartree
  E_f_inp = E_f_inp *hartree

  x = x * 1.0d-10


end subroutine read_pes

subroutine solve_eigenfunctions

  !
  ! Solve the vibrational problem for all eigenfunctions
  !


  ! initial state
  call solve_sinc_DVR(dx,my_SI, E_i_inp, c_i, eig_i)

  write(6,*) "Calculated initial state eigenfunctions"

  ! intermediate states
  do j=1,ninterm

    call solve_sinc_DVR(dx,my_SI, E_n_inp(j,:), c_n(j,:,:), eig_n(j,:))

    write(6,*) "Calculated intermediate state eigenfunctions"

  end do

  ! final states

  do j=1,nfinal

    call solve_sinc_DVR(dx,my_SI, E_f_inp(j,:) , c_f(j,:,:), eig_f(j,:))

    write(6,*) "Calculated final state", j

  end do

  ! eV units
  eig_i =eig_i /eV
  eig_n =eig_n /eV
  eig_f =eig_f /eV

  write(6,*) "Inital state fundamental", (eig_i(2)-eig_i(1))*eV*cm

end subroutine solve_eigenfunctions


  subroutine Kramers_heisenberg_resonant

    !create omega_in
    call linspace(omega_in, omega_in_start,omega_in_end, n_omega_in ) 

    !create omega_out
    call linspace(omega_out, omega_out_start,omega_out_end, n_omega_out ) 

    !
    ! calculate dipole matrix elements between states, for now assume that there is no dependence of the int. el. state on the emission transition dipoles  
    !

    ! absorption dipole matrix elements
    do n1=1,ninterm
      do n2=1,nstates ! intermediate vib
        do m1=1,3
          !D_ni(n1,n2,m1) = sum(dipole_ni(n1,:,m1) * c_n(n1,:,n2) * c_i(:,1))   ! true dipole moment  
          D_ni(n1,n2,m1) = sum( c_n(n1,:,n2) * c_i(:,1))   ! FC
          !D_fn(i,j,k,l) = dipole(i,21,l) * sum(c_f(i,:,j) * c_n(:,k)) ! FC, dipole moment at eq geom
        end do
      end do
    end  do


    !do i=1,nstates 
    !   D_ni(i) = sum(c_n(:,i)*c_i(:,1))
    !end do

    ! emission dipole matrix elements
    do f1=1,nfinal
      do f2=1,nstates ! final
        do n1=1,ninterm
          do n2=1,nstates ! intermediate vib
            do m1=1,3
              !D_fn(i,j,k,l) = sum(c_f(i,:,j) * c_n(:,k))  !sum(dipole(i,:,l) * c_f(i,:,j) * c_n(:,k))
              !D_fn(f1,f2,n1,n2,m1) =  sum(dipole_nf(f1,:,m1) * c_f(f1,:,f2) * c_n(n1,:,n2))   ! true dipole moment
              D_fn(f1,f2,n1,n2,m1) =  sum(c_f(f1,:,f2) * c_n(n1,:,n2))   ! Frank-Condon
              !D_fn(i,j,k,l) = dipole(i,21,l) * sum(c_f(i,:,j) * c_n(:,k)) ! FC, dipole moment at eq geom
            end do
          end do
        end do
      end  do
    end do

    ! transitions from ground state directly to final states
    !do f1=1,nfinal
    !   do f2=1,nstates ! final
    !      do m1=1,3
    !         D_fi(f1,f2,l) = sum(dipole(f1,:,m1) * c_f(f1,:,f2) * c_i(:,1))   ! true dipole moment
    !      end do
    !   end do
    !end  do

    write(6,*) "Calculated dipole matrix elements"


    !
    ! Full Kramers-Heisenberg    
    !

    write(6,*) "Full Kramers-Heisenberg"

    !
    ! a and b components of the dipole matrix elements (polarization) 
    ! F_f^{a,b}(omega) = alpha * E_ni E_nf  sum_n D_ni^a D_fn^b / (omega - (e_n - e_i) + i*gamma)     
    !                     

    !  indices
    !  f1 - electronic final state, f2 - vibratioanl final state
    !  n1 - electronic intermediate state, n2 - vibratioanl intermediate state
    !  m1 - polarization direction 1, m2 - polarization direction 2
    !  om_in - index for omega, om_out - index for omega'



    sigma_unpol=0
    sigma_theta=0

    do om_in =1, n_omega_in

      lambda_F =0 
      lambda_G =0
      lambda_H =0  
      do f1= 1,nfinal ! final el
        do f2=1,nstates ! final vib

          F=0

          do m1=1,3 ! polarization 1
            do m2=1,3 ! polarization 2

              do n1 = 1,ninterm ! intermediate electronic state 
                do n2= 1,nstates ! intermediate vib

                  F(m1,m2) = F(m1,m2) + (eig_n(n1,n2) -eig_i(1)) * (eig_n(n1,n2) -eig_f(f1,f2))  &
                       * D_fn(f1,f2,n1,n2,m1) * D_ni(n1,n2,m2) / ( omega_in(om_in) - &
                       (eig_n(n1,n2) - eig_i(1)) + dcmplx(0,gamma) )

                end do !n2
              end do !n1 

              ! perform spherical average according to J. Phys. B. 27, 4169 (1994)
              lambda_F(f1,f2) = lambda_F(f1,f2) +  real(F(m1,m1) * conjg(F(m2,m2)) )
              lambda_G(f1,f2) = lambda_G(f1,f2) +  real(F(m1,m2) * conjg(F(m1,m2)) )
              lambda_H(f1,f2) = lambda_H(f1,f2) +  real(F(m1,m2) * conjg(F(m2,m1)) )

            end do !m2
          end do !m1


          ! <|F^2|> unpolarized
          F_2_unpol = (10.0d0/3.0d0 ) * lambda_G(f1,f2)

          ! convolute
          do om_out= 1, n_omega_out

            sigma_unpol(om_out,om_in) = sigma_unpol(om_out,om_in) + (omega_out(om_out)/omega_in(om_in))* F_2_unpol * &
                 gaussian(0.0d0, omega_in(om_in) -omega_out(om_out) - (eig_f(f1,f2) -eig_i(1)),  instrument_FWHM) 

            !write(7,*) gaussian(omega_out(om_out), omega_in(om_in) -omega_out(om_out) - (eig_f(f1,f2) -eig_i(1)),  instrument_FWHM), &
            !      omega_in(om_in) -omega_out(om_out) - (eig_f(f1,f2) -eig_i(1)), instrument_FWHM

          end do ! om_out

          !! angle dependence
          !do i_theta=1,n_theta
          !   
          !   ! <|F^2|> for angle theta
          !   F_2_theta = (-lambda_F(f1,f2) +4d0 *lambda_G(f1,f2) -lambda_H(f1,f2) ) &
          !        +(3d0 * lambda_F(f1,f2) -2d0 * lambda_G(f1,f2) +3d0 * lambda_H(f1,f2))*(cos(theta(i_theta)))**2
          !   
          !   ! construct cross section by convolution
          !   do om_out= 1, n_omega_out
          !      
          !      sigma_theta(om_out,om_in, i_theta) = sigma_theta(om_out,om_in, i_theta) + F_2_theta * &
          !           gaussian(omega_out(om_out), omega_in(om_in) -omega_out(om_out) - (e_(f1,f2) -eig_i(1)),  FWHM_instr) 
          !      
          !   end do ! om_out
          !   
          !end do ! i_theta

        end do !f2
      end do ! f1

    end do ! om_in 

    ! normalize spectrum
    norm=sum(sigma_unpol(:,1)) *(omega_out(2) -omega_out(1)) 
    do j=1,n_omega_in
      !norm=sum(sigma_unpol(:,j)) *(omega_out(2) -omega_out(1)) 
      !sigma_unpol(:,j) = sigma_unpol(:,j)/norm
    end do

    ! write sigma to file
    do j=1,n_omega_in

      file=outfile
      write(string,'(F6.2)') omega_in(j)   
      file = trim(adjustl(file)) // trim(adjustl(string)) // ".dat"

      open(10,file=file,status='unknown')

      do i=1,n_omega_out
        write(10,*) omega_out(i), sigma_unpol(i,j)
      end do

      close(10) 

    end do


    file="vib_eigenvalues_intermediate.dat"
    open(10,file=file,status='unknown')
    do i=1,nstates
      write(10,*) eig_n(1,i), 1 , D_ni(1,i,1)
    end do
    close(10)


  end subroutine Kramers_heisenberg_resonant

  subroutine SC_Kramers_heisenberg_resonant()

    complex(kind=wp), allocatable:: efactor_fi(:,:) 
    real(kind=wp), allocatable::  E_i_t(:), E_n_t(:,:), E_f_t(:,:), E_i_t2(:), E_n_t2(:,:), E_f_t2(:,:)
    real(kind=wp), allocatable::  D_ni_t(:,:,:), D_fn_t(:,:,:)
    real(kind=wp), allocatable::  D_ni_t2(:,:,:), D_fn_t2(:,:,:)

    !complex(kind=wp), allocatable::  F_f_om_t(:,:,:,:,:), F_f_om_om(:,:,:,:,:)
    !complex(kind=wp), allocatable::  F_f_om_om_tot(:,:,:,:,:)
    !complex(kind=wp), allocatable::  F_f_om_0_tot(:,:,:,:)
    complex(kind=wp), allocatable::  F_f_omp_t(:,:,:,:,:), F_f_omp_om(:,:,:,:,:)
    complex(kind=wp), allocatable::  F_f_omp_om_tot(:,:,:,:,:)
    complex(kind=wp), allocatable::  F_f_omp_0_tot(:,:,:,:)
    real(kind=wp):: E_fi_mean, E_ni_mean, E_nf_mean
    real(kind=wp), allocatable:: x_t(:), v_t(:), x_t2(:), v_t2(:)
    
    real(kind=wp), allocatable:: sigma_trace(:,:), sigma_trace_0(:)
    real(kind=wp), allocatable:: omega(:), omega_p(:), omega_tmp(:)

    !integer:: ntsteps2, ntsteps_pad2
    integer:: ntsteps_pad,  ntsteps_pad_pow
    integer:: ntsteps_pad2,  ntsteps_pad_pow2
    integer:: omp, om, traj, traj2
    integer:: n_omega, n_omega_p

    call next_power_of_2(ntsteps, ntsteps_pad, ntsteps_pad_pow)
    call next_power_of_2(ntsteps2, ntsteps_pad2, ntsteps_pad_pow2)

    n_omega = ntsteps_pad2
    n_omega_p = ntsteps_pad

    delta_t = delta_t * 1.d-15
    !time_l = (ntsteps-1) * delta_t
    time_l_out = (n_omega_p-1) * delta_t 
    time_l_in = (n_omega -1) *  delta_t 

    ! SC
    allocate(x_t(ntsteps))
    allocate(v_t(ntsteps))
    allocate(x_t2(ntsteps2))
    allocate(v_t2(ntsteps2))

    allocate(E_i_t(ntsteps)) 
    allocate(E_n_t(ninterm,ntsteps))
    allocate(E_f_t(nfinal, ntsteps))
    allocate(E_i_t2(ntsteps)) 
    allocate(E_n_t2(ninterm, ntsteps2))
    allocate(E_f_t2(nfinal, ntsteps2))

    allocate(D_ni_t(ninterm, ntsteps, 3))
    allocate(D_fn_t(nfinal, ntsteps, 3))
    allocate(D_ni_t2(ninterm, ntsteps2, 3))
    allocate(D_fn_t2(nfinal, ntsteps2, 3))

    allocate(time(ntsteps), time2(ntsteps2))
    allocate(efactor_fi(nfinal, ntsteps))

    !allocate(F_f_om_t(nfinal,3,3, ntsteps_pad2, ntsteps))
    !allocate(F_f_om_om(nfinal,3,3, ntsteps_pad2, ntsteps_pad))
    !allocate(F_f_om_om_tot(nfinal, 3,3, ntsteps_pad2, ntsteps_pad))
    !allocate(F_f_om_0_tot(nfinal, 3,3, ntsteps_pad2))
    allocate(F_f_omp_t(nfinal,3,3, ntsteps_pad2, ntsteps2)) 
    allocate(F_f_omp_om(nfinal,3,3, ntsteps_pad2, ntsteps_pad))
    allocate(F_f_omp_om_tot(nfinal, 3,3, ntsteps_pad2, ntsteps_pad))
    allocate(F_f_omp_0_tot(nfinal, 3,3, ntsteps_pad2))

    allocate(sigma_trace(ntsteps_pad2, ntsteps_pad))
    allocate(sigma_trace_0(ntsteps_pad2))

    allocate(omega(n_omega))
    allocate(omega_p(n_omega_p))
    allocate(omega_tmp(n_omega))

    ! initialize variables
    F_f_omp_t = 0.0_wp
    F_f_omp_om = 0.0_wp
    F_f_omp_om_tot = 0.0_wp
    F_f_omp_0_tot = 0.0_wp

    write(6,*) "SCKH resonant"
    
    ! eV units (should probably be converted already when reading the files)
    E_i_inp = E_i_inp / eV
    E_n_inp = E_n_inp / eV
    E_f_inp = E_f_inp / eV
    E_dyn_inp = E_dyn_inp / eV

    ! initialize times
    do i=1, ntsteps
      time(i)= (i-1)*delta_t
    end do
    
    do i=1, ntsteps2 
      time2(i)= (i-1)*delta_t
    end do

    ! alt 1: do an 'even' sampling of N points
    if(samplemode .eq. 1) then  
      call sample_x_mom(x, c_i(:,1), x_sampl, mom_sampl, x_mom_sampl, 1)
    else if(samplemode .eq. 2) then  
      call sample_x_mom(x, c_i(:,1), x_sampl, mom_sampl, x_mom_sampl, 2)
    end if

    write(6,*) "Sampling done"

    ! give a kick in momentum!
    !x_mom_sampl = x_mom_sampl * 1.0e3_wp

    !check
    do i=1,npoints_x_sampl
      write(17,*) x_sampl(i)
    end do

    do i=1,npoints_x_mom_sampl
      write(22,*) x_mom_sampl(i,1), x_mom_sampl(i,2)
    end do

    do i=1,npoints_pes
      write(20,'(3ES16.6)') x(i), c_i(i,1), c_i(i,1) ** 2
    end do

    call init_traj_stuff(E_i_inp, E_n_inp, E_f_inp, E_fi_mean, E_ni_mean, E_nf_mean, n_omega, n_omega_p, omega, omega_p) 

    !
    ! Loop over trajectories
    !

    call hist_init(time_h_0, 1000, x(1), x(npoints_pes) ) 
    call hist_init(time_h_0_mom, 1000, minval(x_mom_sampl(:,2)), maxval(x_mom_sampl(:,2)) ) 
    do i=1, ntsteps
      call hist_init(time_h(i), 1000, x(1), x(npoints_pes) ) 
    end do
    
    do traj=1, npoints_x_mom_sampl
      
      write(6,*) "running traj", traj

      call hist_add(time_h_0, x_mom_sampl(traj,1), 1.0d0)   
      call hist_add(time_h_0_mom, x_mom_sampl(traj,2), 1.0d0)    
      
      ! runs with SI units for energy
      call verlet_trajectory_new(x_mom_sampl(traj,1), x_mom_sampl(traj,2)/my_SI, x, E_i_inp * eV, delta_t, my_SI, x_t, v_t)
      !call verlet_trajectory_new(x_mom_sampl(traj,1), x_mom_sampl(traj,2)/my_SI, x, E_dyn_inp * eV, delta_t, my_SI, x_t, v_t)
      
      !write(6,*) "trajectory", traj
      
      
      do i=1, ntsteps
        call hist_add(time_h(i), x_t(i), 1.0d0)
      end do

      do i=1, ntsteps
        write(21,*) time(i), x_t(i), v_t(i)
      end do
      
      ! look up energies as a function of distance (which in turn is a function of time)
      call spline_easy(x, E_i_inp, npoints_pes, x_t, E_i_t, ntsteps)
      
      do i=1,ninterm
        call spline_easy(x, E_n_inp(i,:), npoints_pes, x_t, E_n_t(i,:), ntsteps)  
        do m1=1,3
          call spline_easy(x, dipole_ni(i,:,m1) , npoints_pes, x_t, D_ni_t(i,:,m1) , ntsteps)  
        end do
      end do
      
      do i=1,nfinal
        call spline_easy(x, E_f_inp(i,:), npoints_pes, x_t, E_f_t(i,:), ntsteps)  
        do m1=1,3
          call spline_easy(x, dipole_nf(i,:,m1), npoints_pes, x_t, D_fn_t(i,:,m1) , ntsteps) ! ugly switch of indices 
        end do
      end do

      do i=1,nfinal
        call compute_efactor(E_f_t(i,:), E_i_t, E_fi_mean, time, efactor_fi(i,:), .false.)      
      end do
      
      ! test
      !do i=1, ntsteps2
      !  write(25,*) i, dreal(efactor_if(1,i)), dimag(efactor_if(1,i))
      !end do
      !stop
      
      ! run second trajectory (on intermediate state PES for example)
      do traj2=1, ntsteps
        
        write(6,*) "running traj2", traj2
        
        call verlet_trajectory_new(x_t(traj2), v_t(traj2), x, E_dyn_inp * eV, delta_t, my_SI, x_t2, v_t2)
        
        ! spline the things we need
        call spline_easy(x, E_i_inp, npoints_pes, x_t2, E_i_t2, ntsteps2)
      
        do i=1,ninterm
          call spline_easy(x, E_n_inp(i,:), npoints_pes, x_t2, E_n_t2(i,:), ntsteps2)  
          do m1=1,3
            call spline_easy(x, dipole_ni(i,:,m1) , npoints_pes, x_t2, D_ni_t2(i,:,m1) , ntsteps2)  
          end do
        end do
        
        do i=1,nfinal
          call spline_easy(x, E_f_inp(i,:), npoints_pes, x_t2, E_f_t2(i,:), ntsteps2)  
          !call compute_efactor(E_i_t, E_f_t(i,:), E_if_mean, time, efactor_if(i,:))      
          do m1=1,3
            call spline_easy(x, dipole_nf(i,:,m1) , npoints_pes, x_t2, D_fn_t2(i,:,m1) , ntsteps2)  
          end do
        end do
      
         do fin = 1,nfinal
          
          call compute_F_f_omp_t(efactor_fi(fin,traj2), E_i_t2(1), E_n_t2(:,1), D_ni_t2(1,:,:), &
               E_n_t2, E_f_t2(fin,:), E_nf_mean, D_fn_t2(:,:,:), time2, gamma, F_f_omp_t(fin, :,:,:,traj2))
        end do
        
        ! test: write first trajectory
        if (traj2 .eq. 1) then
          do i=1, ntsteps2
            write(22,*) time2(i), x_t2(i), v_t2(i)
            !write(23,*) time2(i), x_t2(i), E_i_t2(i), E_n_t2(1,i), E_f_t2(1,i)
            write(23,*) time2(i), x_t2(i), E_i_t2(i) -E_n_t2(1,i), E_i_t2(i) -E_n_t2(1,i) !- E_in_mean
          end do
        end if
        
      end do ! traj2

    !Fourier transform  F_{f, \omega}(t)
    F_f_omp_om = 0.0_wp
    do fin =1, nfinal
      do m1=1,3
        do m2=1,3
          do omp =1, n_omega_p
            !write(6,*) "Fourier transform", om
            !write(6,*) "exp(dcmplx(0, (omega_p(omp) -(eV  / hbar) * E_nf_mean )) * time)", exp(dcmplx(0, (omega_p(omp) -(eV  / hbar) * E_nf_mean )) * time)
            !call FFT_complex(time, F_f_omp_t(fin, m1,m2,omp,:) * exp(dcmplx(0, (omega_p(omp) -(eV  / hbar) * E_nf_mean )) * time) *&
            !     exp(-0*detector_FWHM * eV * time / (2.0_wp * hbar)), &
            !     F_f_omp_om(fin,m1,m2,omp,:))

            !write(6,*) omega_p(omp),  -(eV  / hbar) * E_nf_mean ,omega_p(omp) -(eV  / hbar) * E_nf_mean 
            !call FFT_complex(time, exp(dcmplx(0, (eV  / hbar) * ( omega_p(omp) - E_nf_mean ) * time)) *&
            !     exp(-detector_FWHM * eV * time / (2.0_wp * hbar)), &
            !     F_f_omp_om(fin,m1,m2,omp,:))

            call FFT_complex(time,  F_f_omp_t(fin, m1,m2,omp,:) * exp(dcmplx(0, (eV  / hbar) * ( omega_p(omp) - E_nf_mean ) * time)) *&
                 exp(-detector_FWHM * eV * time / (2.0_wp * hbar)), &
                 F_f_omp_om(fin,m1,m2,omp,:))
            

            !call FFT_complex(time, efactor_if(fin, :), & !F_f_om_t(fin, m1,m2,om,:) *  exp(-detector_FWHM * eV * time / (2.0_wp * hbar)), &
            !     F_f_om_om(fin,m1,m2,om,:), omega_tmp)
            
            !if (om .eq. 1) then
            !  do i=1, ntsteps2
            !    write(24,*) i, dreal( F_f_om_t(1,1,1,i,1) * conjg(F_f_om_t(1,1,1,i,1)))
            !  end do
            !end if
            !stop

            ! add this to the total
            F_f_omp_om_tot(fin, m1,m2,omp,:) = F_f_omp_om_tot(fin,m1,m2,omp,:) + F_f_omp_om(fin,m1,m2,omp,:) !F_f_om_t(fin, m1,m2,om,:) !F_f_om_om(fin,m1,m2,om,:)
            !F_f_om_om_tot(fin, m1,m2,om,:) = F_f_om_om_tot(fin,m1,m2,om,:) + F_f_om_t(fin,m1,m2,om,:) !F_f_om_t(fin, m1,m2,om,:) !F_f_om_om(fin,m1,m2,om,:)


            ! the t=0 contribution
            F_f_omp_0_tot(fin, m1,m2,omp) = F_f_omp_0_tot(fin,m1,m2,omp) + F_f_omp_t(fin,m1,m2,omp,1) !F_f_om_t(fin, m1,m2,om,:) !F_f_om_om(fin,m1,m2,om,:)
            
          end do
        end do
      end do
    end do

    
    write(6,*) "Computed trajectory", traj, x_mom_sampl(traj,1), x_mom_sampl(traj,2)
    
  end do ! end traj
  
  sigma_trace = 0.0_wp
  sigma_trace_0 = 0.0_wp
  do fin =1,nfinal
    do m1=1,3
      sigma_trace = sigma_trace + dreal(F_f_omp_om_tot(fin, m1,m1,:,:) *conjg( F_f_omp_om_tot(fin, m1,m1,:,:)))
      sigma_trace_0 = sigma_trace_0 + dreal(F_f_omp_0_tot(fin, m1,m1,:) *conjg( F_f_omp_0_tot(fin, m1,m1,:)))
    end do
  end do
  
  !sigma_ion_sc = sum(sigma_ion_sc_f,1)
  !sigma_unpol_sc_tmp = sum(real(sigma_unpol_sc_f),1)
  
  !! convolute
  !write(6,*) "convoluting instruemntal broadening"
  !sigma_unpol_sc = sigma_unpol_sc_tmp 
  !do om_out= 1, n_omega_out_sc
  !   do om_in= 1, n_omega_in_sc
  !      do om_in2= 1, n_omega_in_sc
  !
  !         sigma_unpol_sc(om_out,om_in2) = sigma_unpol_sc(om_out,om_in2) + sigma_unpol_sc_tmp(om_out,om_in) * & !(omega_out_sc(om_out)/omega_in_sc(om_in2)) 
  !           gaussian(0.0d0, omega_in_sc(om_in) -omega_in_sc(om_in2),  instrument_FWHM) 
  !   
  !      end do
  !   end do
  !end do ! om_out
  
  !write(6,*) "convoluting detector broadening"
  !sigma_unpol_sc_tmp = sigma_unpol_sc 
    !sigma_unpol_sc = 0
    !do om_in= 1, n_omega_in_sc        
    !   do om_out= 1, n_omega_out_sc
    !      do om_out2= 1, n_omega_out_sc
    !
    !         sigma_unpol_sc(om_out2,om_in) = sigma_unpol_sc(om_out2,om_in) + sigma_unpol_sc_tmp(om_out,om_in) * & !(omega_out_sc(om_out)/omega_in_sc(om_in2)) 
    !           gaussian(0.0d0, omega_out_sc(om_out) -omega_out_sc(om_out2),  detector_FWHM) 
    !   
    !      end do
    !   end do
    !end do ! om_out


    write(6,*)
    write(6,*) "Averaged over", npoints_x_mom_sampl, "trajectories"

    !!    

! ! normalize
! norm=sum(sigma_unpol_sc(:,1)) *(omega_out_sc(2) -omega_out_sc(1)) 
! write(6,*) "norm",norm
! do j=1,n_omega_in_sc
!   !   sigma_unpol_sc(:,j) = sigma_unpol_sc(:,j)/norm
! end do
!
! norm=sum(sigma_ion_sc) *(omega_out_sc(2) -omega_out_sc(1)) 
! write(6,*) "norm",norm
! !sigma_ion_sc = sigma_ion_sc/norm
!
!
! !write distributions
! file="_time_h_0"
! file = trim(adjustl(outfile)) //  trim(adjustl(file))  // ".dat"
! call hist_broadening(time_h_0, 0.01d-10)
! call hist_write(time_h_0, file)
!
! file="_time_h_0_mom"
! file = trim(adjustl(outfile)) //  trim(adjustl(file))  // ".dat"
! !call hist_broadening(time_h_0_mom, 0.01d-10)
! call hist_write(time_h_0_mom, file)
!
! do i=1,10 !ntsteps
!   file="_time_h_"
!   write(string,*) i
!   file = trim(adjustl(outfile)) //  trim(adjustl(file)) // trim(adjustl(string)) // ".dat"
!   call hist_broadening(time_h(i), 0.01d-10)
!   call hist_write(time_h(i), file)
! end do
!
!
!
!    file=outfile
!    !write(string,'(F6.2)') omega_in(j)   
!    file = trim(adjustl(file)) // "_sigma_ion.dat"
!
!    open(10,file=file,status='unknown')
!
!    do i=1, n_omega_out_sc
!      write(10,*) omega_out_sc(i), sigma_ion_sc(i)
!    end do
!
!    close(10) 
!
!    ! write sigma to file
!    do j=1,n_omega_in_sc
!
!      file=outfile
!      write(string,'(F6.2)') omega_in_sc(j)   
!      write(6,'(F6.2)') omega_in_sc(j)   
!
!      file = trim(adjustl(file)) // trim(adjustl(string)) // ".dat"
!
!      write(31,*) file
!
!      open(10,file=file,status='unknown')
!
!      do i=1,n_omega_out_sc
!        write(10,*) omega_out_sc(i), sigma_unpol_sc(i,j)
!      end do
!
!      close(10) 
!
!    end do
!

!    ! write sigma to file
!    do j=1, n_omega
!      
!      file=outfile
!      write(string,'(F7.2)') omega(j) + E_ni_mean  
!      write(6,*) omega(j) + E_ni_mean, string  
!      
!      file = trim(adjustl(file)) // "_sc_" // trim(adjustl(string)) // ".dat"
!
!      write(31,*) file
!
!      open(10,file=file,status='unknown')
!      
!      do i=1,n_omega_p
!        !write(10,*) omega(j)- omega_p(i) + E_in_mean - E_if_mean , sigma_trace(j,i)
!        write(10,*) omega(j)+ E_ni_mean - omega_p(i) - E_fi_mean , sigma_trace(j,i)
!      end do
!      
!      close(10) 
!
!    end do

    ! write sigma to file
    do j=1, n_omega
      
      file=outfile
      write(string,'(F7.2)') omega(j) + E_ni_mean  !omega_p(j) + E_ni_mean  
      !write(6,*) omega(j) + E_ni_mean, string  
      
      file = trim(adjustl(file)) // "_sc_" // trim(adjustl(string)) // ".dat"

      write(31,*) file

      open(10,file=file,status='unknown')
 
      do i=1, n_omega_p
        !write(10,*) omega(j)- omega_p(i) + E_in_mean - E_if_mean , sigma_trace(j,i)
        !write(10,*) omega(j)+ E_ni_mean - omega_p(i) - E_fi_mean , sigma_trace(j,i)
        !write(10,*) omega(i) - E_nf_mean, sigma_trace(i, j -i)
        write(10,*) omega_p(i) + E_nf_mean, sigma_trace(i, j)
      end do
      
      close(10) 

    end do

    ! write xes spectrum at time t to file
    !do j=1, n_omega
    !  
    !  file=outfile
    !  write(string,'(F7.2)') omega(j) + E_ni_mean  !omega_p(j) + E_ni_mean  
    !  !write(6,*) omega(j) + E_ni_mean, string  
    !  
    !  file = trim(adjustl(file)) // "_omp_t_" // trim(adjustl(string)) // ".dat"
    !
    !  write(31,*) file
    !
    !  open(10,file=file,status='unknown')
    !
    !  do i=1, n_omega_p
    !    write(10,*) omega_p(i) + E_nf_mean, F_f_omp_t(fin, m1,m2,omp,:)
    !  end do
    !  
    !  close(10) 
    !
    !end do



    ! write the non-resonant XES cross section |\tilde F_f_{omp -Ef}(0)|^2
    file=outfile
    file = trim(adjustl(file)) // "_sc_XES_0.dat"
    open(10,file=file,status='unknown')

    do i=1,n_omega
      write(10,*) -omega(i) + E_ni_mean - E_fi_mean , sigma_trace_0(i)
      !write(10,*) i , sigma_trace_0(i)
    end do

    close(10) 


  end subroutine SC_Kramers_heisenberg_resonant
  
  subroutine init_traj_stuff(E_i_inp, E_n_inp, E_f_inp, E_fi_mean, E_ni_mean, E_nf_mean, n_omega, n_omega_p, omega, omega_p)

    real(kind=wp), intent(in):: E_i_inp(:), E_n_inp(:,:), E_f_inp(:,:)
    real(kind=wp), intent(out):: E_fi_mean, E_ni_mean, E_nf_mean
    integer, intent(in)::n_omega, n_omega_p
    real(kind=wp), intent(out)::  omega(:), omega_p(:)

    integer, dimension(1)::ind
    
    ind = minloc(E_n_inp(1,:))
    !E_fn_mean =  E_f_inp(nfinal,ind(1)) - E_n_inp(1,ind(1))
    !E_fn_mean =  E_fn_mean / eV
    
    ind = minloc(E_i_inp)
    E_fi_mean = E_f_inp(nfinal,ind(1)) - E_i_inp(ind(1))    ! -203.0d0 !E_in_mean / eV
    !E_fi_mean =  E_fi_mean / eV

    E_ni_mean = E_n_inp(1,ind(1)) - E_i_inp(ind(1)) 
    !E_ni_mean = E_ni_mean / eV
    
    E_nf_mean = E_n_inp(1,ind(1)) - E_f_inp(1,ind(1)) 

    !write(6,*) "E_fn_mean", E_fn_mean
    write(6,*) "E_fi_mean", E_fi_mean
    write(6,*) "E_ni_mean", E_ni_mean
    
    !! 
    j=1
    do i=n_omega_p / 2, 1, -1
      omega_p(j) = -2 * pi * (i) * hbar / (time_l_out * eV) !- E_fn_mean
      j=j+1
    end do
    do i=0, n_omega_p / 2-1
      omega_p(j) =  2 * pi * (i) * hbar / (time_l_out * eV) !- E_fn_mean
      j=j+1
    end do
    
    !do i=0,n_omega_p-1
    !   omega_p(i+1) = 2 * pi * i * hbar / (time_l_out * eV) !- E_fn_mean
    !end do
    
    !! 
    j=1
    do i=n_omega / 2, 1, -1
      omega(j) = -2 * pi * (i) * hbar / (time_l_in * eV) !- E_fn_mean + E_if_mean !+ E_ni_mean !
      j=j+1
    end do
    do i=0, n_omega / 2 - 1
      omega(j) =  2 * pi * (i) * hbar / (time_l_in * eV) !-E_fn_mean + E_if_mean !E_ni_mean !-E_fn_mean + E_fi_mean
      j=j+1
    end do
    
    !do i=0,n_omega-1
    !   omega(i+1) = 2 * pi * i * hbar / (time_l_in * eV) !- E_fn_mean
    !end do

    !do i=0,n_omega_out_sc-1
    !   omega_out_sc(i+1) = 2 * pi * i * hbar / (time_l_out * eV) !- E_fn_mean
    !  ! write(6,*) omega_out_sc(i+1) 
    !end do
    !
    !
    !do i=0,n_omega_in_sc-1
    !   omega_in_sc(i+1) = 2 * pi * i * hbar / (time_l_in * eV) !- E_fn_mean + E_fi_mean
    !   !write(6,*) omega_in_sc(i+1) 
    !end do
    
  end subroutine init_traj_stuff
  
  
end program
