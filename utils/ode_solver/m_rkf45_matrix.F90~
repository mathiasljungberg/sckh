module m_rkf45_matrix
  use m_precision, only: wp
  implicit none
  
  ! module for rkf45 Runge-kutta ODE solver
  ! from http://orion.math.iastate.edu/burkardt/f_src/rkf45/rkf45.html
  ! adapted by Mathias Ljungberg 2011-02-17

contains


subroutine fehl_matrix ( f, neqn1, neqn2, y, t, h, yp, f1, f2, f3, f4, f5, s )

  interface
     subroutine f ( t, y, yp )
       !use parameters, only: wp
       use m_precision, only: wp
       !use m_func_mod
       implicit none
       real(kind=wp), intent(in):: t
       real(kind=wp), dimension(:,:), intent(in) :: y
       real(kind=wp), dimension(:,:), intent(out) :: yp
     end subroutine f
  end interface


!
!*******************************************************************************
!
!! FEHL_D takes one Fehlberg fourth-fifth order step (double precision).
!
!
!  Discussion:
!
!    FEHL integrates a system of NEQN first order ordinary differential
!    equations of the form
!      dY(i)/dT = F(T,Y(1),---,Y(NEQN))
!    where the initial values Y and the initial derivatives
!    YP are specified at the starting point T.
!
!    FEHL advances the solution over the fixed step H and returns
!    the fifth order (sixth order accurate locally) solution
!    approximation at T+H in array S.
!
!    The formulas have been grouped to control loss of significance.
!    FEHL should be called with an H not smaller than 13 units of
!    roundoff in T so that the various independent arguments can be
!    distinguished.
!
!  Author:
!
!    H A Watts and L F Shampine,
!    Sandia Laboratories,
!    Albuquerque, New Mexico.
!
!    RKF45 is primarily designed to solve non-stiff and mildly stiff
!    differential equations when derivative evaluations are inexpensive.
!    RKF45 should generally not be used when the user is demanding
!    high accuracy.
!
!  Parameters:
!
!    Input, external F, a subroutine of the form
!      subroutine f(t,y,yp)
!    to evaluate the derivatives.
!      YP(I) = dY(I) / dT
!
!    Input, integer NEQN, the number of equations to be integrated.
!
!    Input, double precision Y(NEQN), the current value of the dependent
!    variable.
!
!    Input, double precision T, the current value of the independent variable.
!
!    Input, double precision H, the step size to take.
!
!    Input, double precision YP(NEQN), the current value of the derivative 
!    of the dependent variable.
!
!    Output, double precision F1(NEQN), F2(NEQN), F3(NEQN), F4(NEQN),
!    F5(NEQN) are arrays of dimension NEQN which are needed
!    for internal storage.
!
!    Output, double precision S(NEQN), the computed estimate of the solution 
!    at T+H.
!

!  implicit none
!
  integer, intent(in):: neqn1, neqn2 
!
  !external:: f
  real(kind=wp), intent(out):: f1(neqn1,neqn2)
  real(kind=wp), intent(out)::  f2(neqn1,neqn2)
  real(kind=wp), intent(out)::  f3(neqn1,neqn2)
  real(kind=wp), intent(out)::  f4(neqn1,neqn2)
  real(kind=wp), intent(out)::  f5(neqn1,neqn2)
  real(kind=wp), intent(in)::  h
  real(kind=wp), intent(out)::  s(neqn1,neqn2)
  real(kind=wp), intent(in):: t
  real(kind=wp), intent(in):: y(neqn1,neqn2)
  real(kind=wp), intent(in):: yp(neqn1,neqn2)
!
  real(kind=wp):: ch



  ch = h / 4.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * yp(1:neqn1,1:neqn2)

  call f ( t + ch, f5, f1 )

  ch = 3.0D+00 * h / 32.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( yp(1:neqn1,1:neqn2) + 3.0D+00 * f1(1:neqn1,1:neqn2) )

  call f ( t + 3.0D+00 * h / 8.0D+00, f5, f2 )

  ch = h / 2197.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( 1932.0D+00 * yp(1:neqn1,1:neqn2) &
    + ( 7296.0D+00 * f2(1:neqn1,1:neqn2) - 7200.0D+00 * f1(1:neqn1,1:neqn2) ) )

  call f ( t + 12.0D+00 * h / 13.0D+00, f5, f3 )

  ch = h / 4104.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( ( 8341.0D+00 * yp(1:neqn1,1:neqn2) &
    - 845.0D+00 * f3(1:neqn1,1:neqn2) ) + ( 29440.0D+00 * f2(1:neqn1,1:neqn2) &
    - 32832.0D+00 * f1(1:neqn1,1:neqn2) ) )

  call f ( t + h, f5, f4 )

  ch = h / 20520.0D+00

  f1(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( ( -6080.0D+00 * yp(1:neqn1,1:neqn2) &
    + ( 9295.0D+00 * f3(1:neqn1,1:neqn2) - 5643.0D+00 * f4(1:neqn1,1:neqn2) ) ) &
    + ( 41040.0D+00 * f1(1:neqn1,1:neqn2) - 28352.0D+00 * f2(1:neqn1,1:neqn2) ) )

  call f ( t + h / 2.0D+00, f1, f5 )
!
!  Ready to compute the approximate solution at T+H.
!
  ch = h / 7618050.0D+00

  s(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( ( 902880.0D+00 * yp(1:neqn1,1:neqn2) &
    + ( 3855735.0D+00 * f3(1:neqn1,1:neqn2) - 1371249.0D+00 * f4(1:neqn1,1:neqn2) ) ) &
    + ( 3953664.0D+00 * f2(1:neqn1,1:neqn2) + 277020.0D+00 * f5(1:neqn1,1:neqn2) ) )

  return
end subroutine fehl_matrix


subroutine fehl_matrix_c ( f, neqn1, neqn2, y, t, h, yp, f1, f2, f3, f4, f5, s )

  interface
     subroutine f ( t, y, yp )
       !use parameters, only: wp
       use m_precision, only: wp
       !use m_func_mod
       implicit none
       real(kind=wp), intent(in):: t
       complex(kind=wp), dimension(:,:), intent(in) :: y
       complex(kind=wp), dimension(:,:), intent(out) :: yp
     end subroutine f
  end interface


!
!*******************************************************************************
!
!! FEHL_D takes one Fehlberg fourth-fifth order step (double precision).
!
!
!  Discussion:
!
!    FEHL integrates a system of NEQN first order ordinary differential
!    equations of the form
!      dY(i)/dT = F(T,Y(1),---,Y(NEQN))
!    where the initial values Y and the initial derivatives
!    YP are specified at the starting point T.
!
!    FEHL advances the solution over the fixed step H and returns
!    the fifth order (sixth order accurate locally) solution
!    approximation at T+H in array S.
!
!    The formulas have been grouped to control loss of significance.
!    FEHL should be called with an H not smaller than 13 units of
!    roundoff in T so that the various independent arguments can be
!    distinguished.
!
!  Author:
!
!    H A Watts and L F Shampine,
!    Sandia Laboratories,
!    Albuquerque, New Mexico.
!
!    RKF45 is primarily designed to solve non-stiff and mildly stiff
!    differential equations when derivative evaluations are inexpensive.
!    RKF45 should generally not be used when the user is demanding
!    high accuracy.
!
!  Parameters:
!
!    Input, external F, a subroutine of the form
!      subroutine f(t,y,yp)
!    to evaluate the derivatives.
!      YP(I) = dY(I) / dT
!
!    Input, integer NEQN, the number of equations to be integrated.
!
!    Input, double precision Y(NEQN), the current value of the dependent
!    variable.
!
!    Input, double precision T, the current value of the independent variable.
!
!    Input, double precision H, the step size to take.
!
!    Input, double precision YP(NEQN), the current value of the derivative 
!    of the dependent variable.
!
!    Output, double precision F1(NEQN), F2(NEQN), F3(NEQN), F4(NEQN),
!    F5(NEQN) are arrays of dimension NEQN which are needed
!    for internal storage.
!
!    Output, double precision S(NEQN), the computed estimate of the solution 
!    at T+H.
!

!  implicit none
!
  integer, intent(in):: neqn1, neqn2 
!
  !external:: f
  complex(kind=wp), intent(out):: f1(neqn1,neqn2)
  complex(kind=wp), intent(out)::  f2(neqn1,neqn2)
  complex(kind=wp), intent(out)::  f3(neqn1,neqn2)
  complex(kind=wp), intent(out)::  f4(neqn1,neqn2)
  complex(kind=wp), intent(out)::  f5(neqn1,neqn2)
  real(kind=wp), intent(in)::  h
  complex(kind=wp), intent(out)::  s(neqn1,neqn2)
  real(kind=wp), intent(in):: t
  complex(kind=wp), intent(in):: y(neqn1,neqn2)
  complex(kind=wp), intent(in):: yp(neqn1,neqn2)
!
  real(kind=wp):: ch



  ch = h / 4.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * yp(1:neqn1,1:neqn2)

  call f ( t + ch, f5, f1 )

  ch = 3.0D+00 * h / 32.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( yp(1:neqn1,1:neqn2) + 3.0D+00 * f1(1:neqn1,1:neqn2) )

  call f ( t + 3.0D+00 * h / 8.0D+00, f5, f2 )

  ch = h / 2197.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( 1932.0D+00 * yp(1:neqn1,1:neqn2) &
    + ( 7296.0D+00 * f2(1:neqn1,1:neqn2) - 7200.0D+00 * f1(1:neqn1,1:neqn2) ) )

  call f ( t + 12.0D+00 * h / 13.0D+00, f5, f3 )

  ch = h / 4104.0D+00

  f5(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( ( 8341.0D+00 * yp(1:neqn1,1:neqn2) &
    - 845.0D+00 * f3(1:neqn1,1:neqn2) ) + ( 29440.0D+00 * f2(1:neqn1,1:neqn2) &
    - 32832.0D+00 * f1(1:neqn1,1:neqn2) ) )

  call f ( t + h, f5, f4 )

  ch = h / 20520.0D+00

  f1(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( ( -6080.0D+00 * yp(1:neqn1,1:neqn2) &
    + ( 9295.0D+00 * f3(1:neqn1,1:neqn2) - 5643.0D+00 * f4(1:neqn1,1:neqn2) ) ) &
    + ( 41040.0D+00 * f1(1:neqn1,1:neqn2) - 28352.0D+00 * f2(1:neqn1,1:neqn2) ) )

  call f ( t + h / 2.0D+00, f1, f5 )
!
!  Ready to compute the approximate solution at T+H.
!
  ch = h / 7618050.0D+00

  s(1:neqn1,1:neqn2) = y(1:neqn1,1:neqn2) + ch * ( ( 902880.0D+00 * yp(1:neqn1,1:neqn2) &
    + ( 3855735.0D+00 * f3(1:neqn1,1:neqn2) - 1371249.0D+00 * f4(1:neqn1,1:neqn2) ) ) &
    + ( 3953664.0D+00 * f2(1:neqn1,1:neqn2) + 277020.0D+00 * f5(1:neqn1,1:neqn2) ) )

  return
end subroutine fehl_matrix_c



subroutine rkfs_matrix ( f, neqn1, neqn2, y, t, tout, relerr, abserr, iflag, yp, h, &
  f1, f2, f3, f4, f5, savre, savae, nfe, kop, init, jflag, kflag )

  interface
     subroutine f ( t, y, yp )
       !use parameters, only: wp
       use m_precision, only: wp
       !use m_func_mod
       implicit none
       real(kind=wp), intent(in):: t
       real(kind=wp), dimension(:,:), intent(in) :: y
       real(kind=wp), dimension(:,:), intent(out) :: yp
     end subroutine f
  end interface


!
!*******************************************************************************
!
!! RKFS_D implements the Runge-Kutta-Fehlberg method (double precision).
!
!
!  Discussion:
!
!    RKFS integrates a system of first order ordinary differential
!    equations as described in the comments for RKF45.
!
!    The arrays yp, f1, f2, f3, f4, and f5 (of dimension at least neqn) and
!    the variables h, savre, savae, nfe, kop, init, jflag and kflag are used
!    internally by the code and appear in the call list to eliminate
!    local retention of variables between calls.  Accordingly, they
!    should not be altered.  Items of possible interest are
!
!      YP  - the derivative of the solution vector at T;
!      H   - an appropriate stepsize to be used for the next step;
!      NFE - the number of derivative function evaluations.
!
!    The expense is controlled by restricting the number
!    of function evaluations to be approximately MAXNFE.
!    As set, this corresponds to about 500 steps.
!
!    REMIN is the minimum acceptable value of RELERR.  Attempts
!    to obtain higher accuracy with this subroutine are usually
!    very expensive and often unsuccessful.
!
!  implicit none
!
  integer:: neqn1, neqn2
!
  real(kind=wp):: a
  real(kind=wp):: abserr
  real(kind=wp):: ae
  real(kind=wp):: dt
  real(kind=wp):: ee
  real(kind=wp):: eeoet
  real(kind=wp):: eps
  real(kind=wp):: esttol
  real(kind=wp):: et
  !external f
  real(kind=wp):: f1(neqn1,neqn2)
  real(kind=wp):: f2(neqn1,neqn2)
  real(kind=wp):: f3(neqn1,neqn2)
  real(kind=wp):: f4(neqn1,neqn2)
  real(kind=wp):: f5(neqn1,neqn2)
  real(kind=wp):: h
  logical hfaild
  real(kind=wp):: hmin
  integer iflag
  integer init
  integer jflag
  integer k, k2
  integer kflag
  integer kop
  integer, parameter :: maxnfe = 3000
  integer mflag
  integer nfe
  logical output
  real(kind=wp):: relerr
  real(kind=wp), parameter :: remin = 1.0D-12
  real(kind=wp):: rer
  real(kind=wp):: s
  real(kind=wp):: savae
  real(kind=wp):: savre
  real(kind=wp):: scale
  real(kind=wp):: t
  real(kind=wp):: tol
  real(kind=wp):: toln
  real(kind=wp):: tout
  real(kind=wp):: y(neqn1,neqn2)
  real(kind=wp):: yp(neqn1,neqn2)
  real(kind=wp):: ypk


!
!  Check the input parameters.
!
  eps = epsilon ( eps )

  if ( neqn1 < 1 ) then
    iflag = 8
    return
  end if

  if ( relerr < 0.0D+00 ) then
    iflag = 8
    return
  end if

  if ( abserr < 0.0D+00 ) then
    iflag = 8
    return
  end if

  mflag = abs ( iflag )

  if ( abs ( iflag ) < 1 .or. abs ( iflag ) > 8 ) then
    iflag = 8
    return
  end if
!
!  Is this the first call?
!
  if ( mflag == 1 ) then
    go to 50
  end if
!
!  Check continuation possibilities
!
  if ( t == tout .and. kflag /= 3 ) then
    iflag = 8
    return
  end if

  if ( mflag /= 2 ) then
    go to 25
  end if
!
!  iflag = +2 or -2
!
  if ( kflag == 3 ) go to 45
  if ( init == 0 ) go to 45
  if ( kflag == 4 ) go to 40

  if ( kflag == 5 .and. abserr == 0.0D+00 ) then
    stop
  end if

  if ( kflag == 6 .and. relerr <= savre .and. abserr <= savae ) then
    stop
  end if

  go to 50
!
!  iflag = 3,4,5,6,7 or 8
!
   25 continue

  if ( iflag == 3 ) go to 45
  if ( iflag == 4 ) go to 40
  if ( iflag == 5 .and. abserr > 0.0D+00 ) go to 45
!
!  Integration cannot be continued since user did not respond to
!  the instructions pertaining to iflag=5,6,7 or 8
!
  stop
!
!  Reset function evaluation counter
!
40 continue

  nfe = 0
  if ( mflag == 2 ) then
    go to 50
  end if
!
!  Reset flag value from previous call
!
45 continue

  iflag = jflag

  if ( kflag == 3 ) then
    mflag = abs ( iflag )
  end if
!
!  Save input iflag and set continuation flag for subsequent input checking.
!
50 continue

  jflag = iflag
  kflag = 0
!
!  Save relerr and abserr for checking input on subsequent calls
!
  savre = relerr
  savae = abserr
!
!  Restrict relative error tolerance to be at least as large as
!  2*eps+remin to avoid limiting precision difficulties arising
!  from impossible accuracy requests
!
  rer = 2.0D+00 * epsilon ( rer ) + remin
!
!  The relative error tolerance is too small.
!
  if ( relerr < rer ) then
    relerr = rer
    iflag = 3
    kflag = 3
    return
  end if

  dt = tout - t

  if ( mflag == 1 ) go to 60
  if ( init == 0 ) go to 65
  go to 80
!
!  Initialization:
!    set initialization completion indicator, init
!    set indicator for too many output points, kop
!    evaluate initial derivatives
!    set counter for function evaluations, nfe
!    evaluate initial derivatives
!    set counter for function evaluations, nfe
!    estimate starting stepsize
!
   60 continue

  init = 0
  kop = 0
  a = t

  call f ( a, y, yp )

  nfe = 1

  if ( t == tout ) then
    iflag = 2
    return
  end if

   65 continue

  init = 1

  h = abs ( dt )
  toln = 0.0D+00
  do k = 1, neqn1     ! loop also over second index
     do k2 = 1, neqn2     ! loop also over second index
        tol = relerr * abs ( y(k,k2) ) + abserr
        if ( tol > 0.0D+00 ) then
           toln = tol
           ypk = abs ( yp(k,k2) )
           if ( ypk * h**5 > tol) then
              h = ( tol / ypk )**0.2D+00
           end if
        end if
     end do
  end do

  if ( toln <= 0.0D+00 ) then
    h = 0.0D+00
  end if

  h = max ( h, 26.0D+00 * eps * max ( abs ( t ), abs ( dt ) ) )
  jflag =  sign ( 2, iflag )
!
!  Set stepsize for integration in the direction from T to TOUT.
!
   80 continue

  h = sign ( h, dt )
!
!  Test to see if RKF45 is being severely impacted by too many output points.
!
  if ( abs ( h ) >= 2.0D+00 * abs ( dt ) ) then
    kop = kop + 1
  end if
!
!  Unnecessary frequency of output.
!
  if ( kop == 100 ) then
    kop = 0
    iflag = 7
    return
  end if
!
!  If too close to output point, extrapolate and return.
!
  if ( abs ( dt ) <= 26.0D+00 * eps * abs ( t ) ) then
    y(1:neqn1, 1:neqn2) = y(1:neqn1, 1:neqn2) + dt * yp(1:neqn1, 1:neqn2)
    a = tout

    call f ( a, y, yp )

    nfe = nfe + 1
    t = tout
    iflag = 2
    return
  end if
!
!  Initialize output point indicator.
!
  output = .false.
!
!  To avoid premature underflow in the error tolerance function,
!  scale the error tolerances
!
  scale = 2.0D+00 / relerr
  ae = scale * abserr
!
!  Step by step integration.
!
  100 continue

  hfaild = .false.
!
!  Set smallest allowable stepsize.
!
  hmin = 26.0D+00 * eps * abs ( t )
!
!  Adjust stepsize if necessary to hit the output point.
!  Look ahead two steps to avoid drastic changes in the stepsize and
!  thus lessen the impact of output points on the code.
!
  dt = tout - t
  if ( abs ( dt ) >= 2.0D+00 * abs ( h ) ) go to 200
!
!  The next successful step will complete the integration to the output point.
!
  if ( abs ( dt ) <= abs ( h ) ) then
    output = .true.
    h = dt
    go to 200
  end if

  h = 0.5D+00 * dt
!
!  Core integrator for taking a single step
!
!     The tolerances have been scaled to avoid premature underflow in
!     computing the error tolerance function ET.
!     To avoid problems with zero crossings, relative error is measured
!     using the average of the magnitudes of the solution at the
!     beginning and end of a step.
!     The error estimate formula has been grouped to control loss of
!     significance.
!
!     To distinguish the various arguments, H is not permitted
!     to become smaller than 26 units of roundoff in T.
!     Practical limits on the change in the stepsize are enforced to
!     smooth the stepsize selection process and to avoid excessive
!     chattering on problems having discontinuities.
!     To prevent unnecessary failures, the code uses 9/10 the stepsize
!     it estimates will succeed.
!
!     After a step failure, the stepsize is not allowed to increase for
!     the next attempted step.  This makes the code more efficient on
!     problems having discontinuities and more effective in general
!     since local extrapolation is being used and extra caution seems
!     warranted.
!
!     Test number of derivative function evaluations.
!     If okay, try to advance the integration from T to T+H.
!
  200 continue
!
!  Too much work.
!
  if ( nfe > maxnfe ) then
    iflag = 4
    kflag = 4
    return
  end if
!
!  Advance an approximate solution over one step of length H.
!
  call fehl_matrix ( f, neqn1, neqn2, y, t, h, yp, f1, f2, f3, f4, f5, f1 )
  nfe = nfe + 5 
!
!  Compute and test allowable tolerances versus local error estimates
!  and remove scaling of tolerances.  Note that relative error is
!  measured with respect to the average of the magnitudes of the
!  solution at the beginning and end of the step.
!
  eeoet = 0.0D+00

  do k = 1, neqn1 ! loop also over second index
     do k2 = 1, neqn2 ! loop also over second index
        et = abs ( y(k,k2) ) + abs ( f1(k,k2) ) + ae

        if ( et <= 0.0D+00 ) then
           iflag = 5
           return
        end if

        ee = abs ( ( -2090.0D+00 * yp(k,k2) + ( 21970.0D+00 * f3(k,k2) &
             - 15048.0D+00 * f4(k,k2) ) ) &
             + ( 22528.0D+00 * f2(k,k2) - 27360.0D+00 * f5(k,k2) ) )

        eeoet = max ( eeoet, ee / et )

     end do
  end do

  esttol = abs ( h ) * eeoet * scale / 752400.0D+00

  if ( esttol <= 1.0D+00 ) then
    go to 260
  end if
!
!  Unsuccessful step.  Reduce the stepsize, try again.
!  The decrease is limited to a factor of 1/10.
!
  hfaild = .true.
  output = .false.

  if ( esttol < 59049.0D+00 ) then
    s = 0.9D+00 / esttol**0.2D+00
  else
    s = 0.1D+00
  end if

  h = s * h

  if ( abs ( h ) < hmin ) then
    iflag = 6
    kflag = 6
    return
  else
    go to 200
  end if
!
!  Successful step.  Store solution at T+H and evaluate derivatives there.
!
  260 continue

  t = t + h
  y(1:neqn1,1:neqn2) = f1(1:neqn1, 1:neqn2)
  a = t
  call f ( a, y, yp )
  nfe = nfe + 1
!
!  Choose next stepsize.  The increase is limited to a factor of 5.
!  If step failure has just occurred, next stepsize is not allowed to increase
!
  if ( esttol > 0.0001889568D+00 ) then
    s = 0.9D+00 / esttol**0.2D+00
  else
    s = 5.0D+00
  end if

  if ( hfaild ) then
    s = min ( s, 1.0D+00 )
  end if

  h = sign ( max ( s * abs ( h ), hmin ), h )
!
!  End of core integrator
!
!  Should we take another step?
!
  if ( output ) then
    t = tout
    iflag = 2
  end if

  if ( iflag > 0 ) go to 100
!
!  Integration successfully completed
!
!  one-step mode
!
  iflag = - 2

  return
end subroutine rkfs_matrix



subroutine rkfs_matrix_c ( f, neqn1, neqn2, y, t, tout, relerr, abserr, iflag, yp, h, &
  f1, f2, f3, f4, f5, savre, savae, nfe, kop, init, jflag, kflag )

  interface
     subroutine f ( t, y, yp )
       !use parameters, only: wp
       use m_precision, only: wp
       !use m_func_mod
       implicit none
       real(kind=wp), intent(in):: t
       complex(kind=wp), dimension(:,:), intent(in) :: y
       complex(kind=wp), dimension(:,:), intent(out) :: yp
     end subroutine f
  end interface


!
!*******************************************************************************
!
!! RKFS_D implements the Runge-Kutta-Fehlberg method (double precision).
!
!
!  Discussion:
!
!    RKFS integrates a system of first order ordinary differential
!    equations as described in the comments for RKF45.
!
!    The arrays yp, f1, f2, f3, f4, and f5 (of dimension at least neqn) and
!    the variables h, savre, savae, nfe, kop, init, jflag and kflag are used
!    internally by the code and appear in the call list to eliminate
!    local retention of variables between calls.  Accordingly, they
!    should not be altered.  Items of possible interest are
!
!      YP  - the derivative of the solution vector at T;
!      H   - an appropriate stepsize to be used for the next step;
!      NFE - the number of derivative function evaluations.
!
!    The expense is controlled by restricting the number
!    of function evaluations to be approximately MAXNFE.
!    As set, this corresponds to about 500 steps.
!
!    REMIN is the minimum acceptable value of RELERR.  Attempts
!    to obtain higher accuracy with this subroutine are usually
!    very expensive and often unsuccessful.
!
!  implicit none
!
  integer:: neqn1, neqn2
!
  real(kind=wp):: a
  real(kind=wp):: abserr
  real(kind=wp):: ae
  real(kind=wp):: dt
  real(kind=wp):: ee
  real(kind=wp):: eeoet
  real(kind=wp):: eps
  real(kind=wp):: esttol
  real(kind=wp):: et
  !external f
  complex(kind=wp):: f1(neqn1,neqn2)
  complex(kind=wp):: f2(neqn1,neqn2)
  complex(kind=wp):: f3(neqn1,neqn2)
  complex(kind=wp):: f4(neqn1,neqn2)
  complex(kind=wp):: f5(neqn1,neqn2)
  real(kind=wp):: h
  logical hfaild
  real(kind=wp):: hmin
  integer iflag
  integer init
  integer jflag
  integer k, k2
  integer kflag
  integer kop
  integer, parameter :: maxnfe = 3000
  integer mflag
  integer nfe
  logical output
  real(kind=wp):: relerr
  real(kind=wp), parameter :: remin = 1.0D-12
  real(kind=wp):: rer
  real(kind=wp):: s
  real(kind=wp):: savae
  real(kind=wp):: savre
  real(kind=wp):: scale
  real(kind=wp):: t
  real(kind=wp):: tol
  real(kind=wp):: toln
  real(kind=wp):: tout
  complex(kind=wp):: y(neqn1,neqn2)
  complex(kind=wp):: yp(neqn1,neqn2)
  real(kind=wp):: ypk


!
!  Check the input parameters.
!
  eps = epsilon ( eps )

  if ( neqn1 < 1 ) then
    iflag = 8
    return
  end if

  if ( relerr < 0.0D+00 ) then
    iflag = 8
    return
  end if

  if ( abserr < 0.0D+00 ) then
    iflag = 8
    return
  end if

  mflag = abs ( iflag )

  if ( abs ( iflag ) < 1 .or. abs ( iflag ) > 8 ) then
    iflag = 8
    return
  end if
!
!  Is this the first call?
!
  if ( mflag == 1 ) then
    go to 50
  end if
!
!  Check continuation possibilities
!
  if ( t == tout .and. kflag /= 3 ) then
    iflag = 8
    return
  end if

  if ( mflag /= 2 ) then
    go to 25
  end if
!
!  iflag = +2 or -2
!
  if ( kflag == 3 ) go to 45
  if ( init == 0 ) go to 45
  if ( kflag == 4 ) go to 40

  if ( kflag == 5 .and. abserr == 0.0D+00 ) then
    stop
  end if

  if ( kflag == 6 .and. relerr <= savre .and. abserr <= savae ) then
    stop
  end if

  go to 50
!
!  iflag = 3,4,5,6,7 or 8
!
   25 continue

  if ( iflag == 3 ) go to 45
  if ( iflag == 4 ) go to 40
  if ( iflag == 5 .and. abserr > 0.0D+00 ) go to 45
!
!  Integration cannot be continued since user did not respond to
!  the instructions pertaining to iflag=5,6,7 or 8
!
  stop
!
!  Reset function evaluation counter
!
40 continue

  nfe = 0
  if ( mflag == 2 ) then
    go to 50
  end if
!
!  Reset flag value from previous call
!
45 continue

  iflag = jflag

  if ( kflag == 3 ) then
    mflag = abs ( iflag )
  end if
!
!  Save input iflag and set continuation flag for subsequent input checking.
!
50 continue

  jflag = iflag
  kflag = 0
!
!  Save relerr and abserr for checking input on subsequent calls
!
  savre = relerr
  savae = abserr
!
!  Restrict relative error tolerance to be at least as large as
!  2*eps+remin to avoid limiting precision difficulties arising
!  from impossible accuracy requests
!
  rer = 2.0D+00 * epsilon ( rer ) + remin
!
!  The relative error tolerance is too small.
!
  if ( relerr < rer ) then
    relerr = rer
    iflag = 3
    kflag = 3
    return
  end if

  dt = tout - t

  if ( mflag == 1 ) go to 60
  if ( init == 0 ) go to 65
  go to 80
!
!  Initialization:
!    set initialization completion indicator, init
!    set indicator for too many output points, kop
!    evaluate initial derivatives
!    set counter for function evaluations, nfe
!    evaluate initial derivatives
!    set counter for function evaluations, nfe
!    estimate starting stepsize
!
   60 continue

  init = 0
  kop = 0
  a = t

  call f ( a, y, yp )

  nfe = 1

  if ( t == tout ) then
    iflag = 2
    return
  end if

   65 continue

  init = 1

  h = abs ( dt )
  toln = 0.0D+00
  do k = 1, neqn1     ! loop also over second index
     do k2 = 1, neqn2     ! loop also over second index
        tol = relerr * abs ( y(k,k2) ) + abserr
        if ( tol > 0.0D+00 ) then
           toln = tol
           ypk = abs ( yp(k,k2) )
           if ( ypk * h**5 > tol) then
              h = ( tol / ypk )**0.2D+00
           end if
        end if
     end do
  end do

  if ( toln <= 0.0D+00 ) then
    h = 0.0D+00
  end if

  h = max ( h, 26.0D+00 * eps * max ( abs ( t ), abs ( dt ) ) )
  jflag =  sign ( 2, iflag )
!
!  Set stepsize for integration in the direction from T to TOUT.
!
   80 continue

  h = sign ( h, dt )
!
!  Test to see if RKF45 is being severely impacted by too many output points.
!
  if ( abs ( h ) >= 2.0D+00 * abs ( dt ) ) then
    kop = kop + 1
  end if
!
!  Unnecessary frequency of output.
!
  if ( kop == 100 ) then
    kop = 0
    iflag = 7
    return
  end if
!
!  If too close to output point, extrapolate and return.
!
  if ( abs ( dt ) <= 26.0D+00 * eps * abs ( t ) ) then
    y(1:neqn1, 1:neqn2) = y(1:neqn1, 1:neqn2) + dt * yp(1:neqn1, 1:neqn2)
    a = tout

    call f ( a, y, yp )

    nfe = nfe + 1
    t = tout
    iflag = 2
    return
  end if
!
!  Initialize output point indicator.
!
  output = .false.
!
!  To avoid premature underflow in the error tolerance function,
!  scale the error tolerances
!
  scale = 2.0D+00 / relerr
  ae = scale * abserr
!
!  Step by step integration.
!
  100 continue

  hfaild = .false.
!
!  Set smallest allowable stepsize.
!
  hmin = 26.0D+00 * eps * abs ( t )
!
!  Adjust stepsize if necessary to hit the output point.
!  Look ahead two steps to avoid drastic changes in the stepsize and
!  thus lessen the impact of output points on the code.
!
  dt = tout - t
  if ( abs ( dt ) >= 2.0D+00 * abs ( h ) ) go to 200
!
!  The next successful step will complete the integration to the output point.
!
  if ( abs ( dt ) <= abs ( h ) ) then
    output = .true.
    h = dt
    go to 200
  end if

  h = 0.5D+00 * dt
!
!  Core integrator for taking a single step
!
!     The tolerances have been scaled to avoid premature underflow in
!     computing the error tolerance function ET.
!     To avoid problems with zero crossings, relative error is measured
!     using the average of the magnitudes of the solution at the
!     beginning and end of a step.
!     The error estimate formula has been grouped to control loss of
!     significance.
!
!     To distinguish the various arguments, H is not permitted
!     to become smaller than 26 units of roundoff in T.
!     Practical limits on the change in the stepsize are enforced to
!     smooth the stepsize selection process and to avoid excessive
!     chattering on problems having discontinuities.
!     To prevent unnecessary failures, the code uses 9/10 the stepsize
!     it estimates will succeed.
!
!     After a step failure, the stepsize is not allowed to increase for
!     the next attempted step.  This makes the code more efficient on
!     problems having discontinuities and more effective in general
!     since local extrapolation is being used and extra caution seems
!     warranted.
!
!     Test number of derivative function evaluations.
!     If okay, try to advance the integration from T to T+H.
!
  200 continue
!
!  Too much work.
!
  if ( nfe > maxnfe ) then
    iflag = 4
    kflag = 4
    return
  end if
!
!  Advance an approximate solution over one step of length H.
!
  call fehl_matrix_c ( f, neqn1, neqn2, y, t, h, yp, f1, f2, f3, f4, f5, f1 )
  nfe = nfe + 5 
!
!  Compute and test allowable tolerances versus local error estimates
!  and remove scaling of tolerances.  Note that relative error is
!  measured with respect to the average of the magnitudes of the
!  solution at the beginning and end of the step.
!
  eeoet = 0.0D+00

  do k = 1, neqn1 ! loop also over second index
     do k2 = 1, neqn2 ! loop also over second index
        et = abs ( y(k,k2) ) + abs ( f1(k,k2) ) + ae

        if ( et <= 0.0D+00 ) then
           iflag = 5
           return
        end if

        ee = abs ( ( -2090.0D+00 * yp(k,k2) + ( 21970.0D+00 * f3(k,k2) &
             - 15048.0D+00 * f4(k,k2) ) ) &
             + ( 22528.0D+00 * f2(k,k2) - 27360.0D+00 * f5(k,k2) ) )

        eeoet = max ( eeoet, ee / et )

     end do
  end do

  esttol = abs ( h ) * eeoet * scale / 752400.0D+00

  if ( esttol <= 1.0D+00 ) then
    go to 260
  end if
!
!  Unsuccessful step.  Reduce the stepsize, try again.
!  The decrease is limited to a factor of 1/10.
!
  hfaild = .true.
  output = .false.

  if ( esttol < 59049.0D+00 ) then
    s = 0.9D+00 / esttol**0.2D+00
  else
    s = 0.1D+00
  end if

  h = s * h

  if ( abs ( h ) < hmin ) then
    iflag = 6
    kflag = 6
    return
  else
    go to 200
  end if
!
!  Successful step.  Store solution at T+H and evaluate derivatives there.
!
  260 continue

  t = t + h
  y(1:neqn1,1:neqn2) = f1(1:neqn1, 1:neqn2)
  a = t
  call f ( a, y, yp )
  nfe = nfe + 1
!
!  Choose next stepsize.  The increase is limited to a factor of 5.
!  If step failure has just occurred, next stepsize is not allowed to increase
!
  if ( esttol > 0.0001889568D+00 ) then
    s = 0.9D+00 / esttol**0.2D+00
  else
    s = 5.0D+00
  end if

  if ( hfaild ) then
    s = min ( s, 1.0D+00 )
  end if

  h = sign ( max ( s * abs ( h ), hmin ), h )
!
!  End of core integrator
!
!  Should we take another step?
!
  if ( output ) then
    t = tout
    iflag = 2
  end if

  if ( iflag > 0 ) go to 100
!
!  Integration successfully completed
!
!  one-step mode
!
  iflag = - 2

  return
end subroutine rkfs_matrix_c

subroutine timestamp ( )
!
!*******************************************************************************
!
!! TIMESTAMP prints the current YMDHMS date as a time stamp.
!
!
!  Example:
!
!    May 31 2001   9:45:54.872 AM
!
!  Modified:
!
!    31 May 2001
!
!  Author:
!
!    John Burkardt
!
!  Parameters:
!
!    None
!
  implicit none
!
  character ( len = 8 ) ampm
  integer d
  character ( len = 8 ) date
  integer h
  integer m
  integer mm
  character ( len = 9 ), parameter, dimension(12) :: month = (/ &
    'January  ', 'February ', 'March    ', 'April    ', &
    'May      ', 'June     ', 'July     ', 'August   ', &
    'September', 'October  ', 'November ', 'December ' /)
  integer n
  integer s
  character ( len = 10 )  time
  integer values(8)
  integer y
  character ( len = 5 ) zone
!
  call date_and_time ( date, time, zone, values )

  y = values(1)
  m = values(2)
  d = values(3)
  h = values(5)
  n = values(6)
  s = values(7)
  mm = values(8)

  if ( h < 12 ) then
    ampm = 'AM'
  else if ( h == 12 ) then
    if ( n == 0 .and. s == 0 ) then
      ampm = 'Noon'
    else
      ampm = 'PM'
    end if
  else
    h = h - 12
    if ( h < 12 ) then
      ampm = 'PM'
    else if ( h == 12 ) then
      if ( n == 0 .and. s == 0 ) then
        ampm = 'Midnight'
      else
        ampm = 'AM'
      end if
    end if
  end if

  write ( *, '(a,1x,i2,1x,i4,2x,i2,a1,i2.2,a1,i2.2,a1,i3.3,1x,a)' ) &
    trim ( month(m) ), d, y, h, ':', n, ':', s, '.', mm, trim ( ampm )

  return
end subroutine timestamp

end module m_rkf45_matrix
