program vib_normal3
  use parameters
  implicit none

  ! input/output
  character(75)::inputfile,outputfile
  integer::npoints,alt1, alt2
  real(kind=wp)::c0
  real(kind=wp), dimension(:,:),allocatable:: q
  real(kind=wp), dimension(:),allocatable:: V
  real(kind=wp), dimension(3)::hfreq,my
  integer, dimension(3)::nstates
  
  ! loop variables
  integer::i,j,k,l,m ,n, deg, point, ind1, ind2, count, ii
  
  ! other variables
  integer::nstates3, pot1,pot2,pot3,ncols
  integer, dimension(:),allocatable:: q1_vec, q2_vec, q3_vec
  real(kind=wp), dimension(:),allocatable:: V_SI, sol, rhs
  real(kind=wp), dimension(:,:),allocatable:: p_elem1, p_elem2, p_elem3
  real(kind=wp), dimension(:,:),allocatable:: Hmatrix, Htmp,q_SI, matrix
  real(kind=wp), dimension(:,:,:),allocatable:: Mx1, Mx2, Mx3
  real(kind=wp), dimension(3):: my_SI, coeff2_h, coeff2_SI, omega_h, omega_SI 
  
  ! LAPACK variables
  integer::INFO, LWORK
  real(kind=wp), dimension(:),allocatable::W,WORK 
  
  
  !functions
  integer::delta
     !         write(11,*) i,j,k
  !real(kind=wp):: harm_eigenfun
  ! real(kind=wp)::dlamch

  ncols=6

  ! read from standard input
  read(5,*) inputfile
  !read(5,*) outputfile
  !read(5,*) alt1, alt2
  !read(5,*) nin, npoints, nstates, nfit_p, nfit_s
  !read(5,*) x_new_min, x_new_max
  read(5,*) npoints
  read(5,*) nstates(1),nstates(2), nstates(3)
  read(5,*) hfreq(1), hfreq(2), hfreq(3)
  read(5,*) my(1), my(2), my(3)
  read(5,*) c0

  ! allocate
  !allocate( x(nin),y(nin), x_SI(npoints),y_SI(npoints),x_new(npoints), &
  !     y_new(npoints))

  ! allocate
  allocate( q(3,npoints), q_SI(3,npoints), V(npoints), V_SI(npoints))
  allocate(q1_vec(ncols), q2_vec(ncols), q3_vec(ncols), matrix(npoints,ncols) )
  allocate( rhs(npoints), sol(npoints))

  ! read file with values of q1, q2, q3 [Å] and V, hartree
  open(10,file=inputfile,status='old')
  
  
  do i=1,npoints
     read(10,*) q(1,i), q(2,i), q(3,i), V(i)
  enddo

  close(10)

 !!write(6,*) "1"

  ! my
  my_SI = my*amu

  ! nstates3
  nstates3 = nstates(1)* nstates(2)* nstates(3)

  ! go to SI units
  V_SI=V*hartree
  q_SI=q*1.0e-10
  coeff2_SI = ((hfreq/(hbar*cm))**2)*0.5*my_SI
  coeff2_h = coeff2_SI*1.0d-20/hartree  !((hfreq/(hbar))**2)*0.5*my*1.0d20 
!coeff2_SI*1.0d-20/amu ! helt fel, kolla snarast!
  omega_SI = hfreq/(hbar*cm)
  omega_h = hfreq/(hbar*cm*hartree)
  

  
  ! fit a sixth degree polynomial, linear least squares
  !*********************************************************************  
  
  ! sätter upp matrisen med coefficienter, q [Å]
   
!  do point=1,npoints
!     count=0
!     
!     do deg=3,6
!        ! loopar igenom alla n,m,l med summa deg
!        do i=0,deg
!           do j=0,deg-i
!
!              k=deg-(i+j)
!              count = count +1
!              
!              if(point.eq.1) then
!                 q1_vec(count) = i
!                 q2_vec(count) = j
!                 q3_vec(count) = k                 
!              end if


!              matrix(point,count)= (q(1,point)**i)*(q(2,point)**j)*(q(3,point)**k)

     !         write(11,*) i,j,k
     !         write(11,*) q(1,point),q(2,point),q(3,point)
     !         write(11,*) (q(1,point)**i)*(q(2,point)**j)*(q(3,point)**k) 

!           end do
!        end do
!     end do
!  end do
  ! sätter upp matrisen med coefficienter, q [Å]
   
  do point=1,npoints
     count=0
     
     do deg=2,2
        ! loopar igenom alla n,m,l med summa deg
        do i=0,deg
          do j=0,deg-i

              k=deg-(i+j)
              count = count +1
              
              if(point.eq.1) then
                 q1_vec(count) = i
                 q2_vec(count) = j
                 q3_vec(count) = k                 
              end if

              matrix(point,count)= (q(1,point)**i)*(q(2,point)**j)*(q(3,point)**k)
 
             write(11,*) i,j,k
             write(11,*) q(1,point),q(2,point),q(3,point)
             write(11,*) (q(1,point)**i)*(q(2,point)**j)*(q(3,point)**k) 
           end do
        end do
     end do
  end do

!write(6,*) count

do i=1,npoints
   write(11,*) "row number", i
   write(11,*) matrix(i,:)
end do

  ! sätter upp right hand side, hartree
  do point = 1,npoints
    ! rhs(point) = V(point) - c0 - sum(coeff2_h*(q(:,point)**2))  
     rhs(point) = V(point) - c0
     !write(6,*) "sum",sum(coeff2_h*(q(:,point)**2))  
     ! write(6,*) "coeff",coeff2_h*(q(:,point)**2)
     !write(6,*) "V-c0", V(point) - c0
     !write(6,*) "rhs",  rhs(point)
  end do

!do i=1,count
!write(6,*)
!     write(6,*) q1_vec(i),q2_vec(i),q3_vec(i)
!     write(6,*) matrix(:,i)
!end do
  
 !write(6,*) coeff2_h
 !write(6,*) q(:,1)**2


!write(6,*) q1_vec(1),q2_vec(1),q3_vec(1)
!write(6,*) q(1,1), q(2,1),q(3,1)
!write(6,*) (q(1,1)**0)*(q(2,1)**0)*(q(3,1)**3)
!write(6,*) V
!write(6,*)
!write(6,*) c0
!write(6,*) sum(coeff2_h*(q(:,1)**2))

!write(6,*) 
!write(6,*)

!write(6,*) rhs



  ! solve the  lsq problem 
  !*************************************
 
  sol =rhs

  LWORK = npoints*ncols +100
  allocate( WORK(LWORK))

  ! DGELS( TRANS, M, N, NRHS, A, LDA, B, LDB, WORK, LWORK, INFO )
  call  DGELS( 'N', npoints, ncols, 1, matrix, npoints, sol, npoints, WORK, LWORK, INFO )

  deallocate( WORK )

write(6,*) INFO, sol

  ! set up Hamiltonian
  !*********************************************************************  

  !allocate
  allocate( Hmatrix(nstates3, nstates3) , p_elem1(nstates(1),nstates(1)), p_elem2(nstates(2),nstates(2)) &
       , p_elem3(nstates(3),nstates(3)) )

  Hmatrix=0


  ! basis functions | i >| j >| k > , nstates(1)*nstates(3)*nstates(3) number of them
  ! no need to precompute the matrix elements < i | p^2/2m | j >, or?


  ! momentum part, < m |p^2/(2m)  | n >, watch out for the fence post!
  !precompute it 

  ! diagonal part
  do i=1,nstates(1)
     p_elem1(i,i) = (2*i-1)*hbar*omega_h(1)/4.
  end do

  do i=1,nstates(2)
     p_elem2(i,i) = (2*i-1)*hbar*omega_h(2)/4.
  end do

  do i=1,nstates(3)
     p_elem3(i,i) = (2*i-1)*hbar*omega_h(3)/4.
  end do


  !non diagonal part
  do i=1,nstates(1)-2 
     p_elem1(i,i+2) = -sqrt(dfloat(i+1))*sqrt(dfloat(i))*hbar*omega_h(1)/4.
  end do

  do i=1,nstates(2)-2 
     p_elem2(i,i+2) = -sqrt(dfloat(i+1))*sqrt(dfloat(i))*hbar*omega_h(2)/4.
  end do
  
  do i=1,nstates(3)-2 
     p_elem3(i,i+2) = -sqrt(dfloat(i+1))*sqrt(dfloat(i))*hbar*omega_SI(3)/4.
  end do



  ! potential energy part 

  allocate( Htmp(nstates(1),nstates(1)),  Mx1(7,nstates(1),nstates(1))  )
  
  do i=0,2!6
     
     call mat_elem_xn(Htmp,nstates(1),i)
     
     Mx1(i+1,:,:) = Mx1(i+1,:,:) + (hbar/(2*my(1)*omega_h(1)))**(dfloat(i)/2.d0)*Htmp
      
  end do
 

  deallocate(Htmp)
  allocate( Htmp(nstates(2),nstates(2)), Mx2(7,nstates(2),nstates(2)))
  
  do i=0,2!6
     
     call mat_elem_xn(Htmp,nstates(2),i)
     
     Mx2(i+1,:,:) = Mx2(i+1,:,:) + (hbar/(2*my(2)*omega_h(2)))**(dfloat(i)/2.d0)*Htmp  
     
  end do
  
  deallocate(Htmp)
  allocate( Htmp(nstates(3),nstates(3)) , Mx3(7,nstates(3),nstates(3)))
  
  do i=0,2!6
     
     call mat_elem_xn(Htmp,nstates(3),i)
     
     Mx3(i+1,:,:) = Mx3(i+1,:,:) + (hbar/(2*my(3)*omega_h(3)))**(dfloat(i)/2.d0)*Htmp
     
  end do

 


  ! Hamiltonian
  
  do i=1,nstates(1)
     do j=1,nstates(2)
        do k=1,nstates(3)
           
           ind1 = k + (j-1)*nstates(3) + (i-1)*nstates(2)*nstates(3)
           
           do l=1,nstates(1)
              do m=1,nstates(2)
                 do n=1,nstates(3)
                    
                    ind2 = l + (m-1)*nstates(3) + (n-1)*nstates(2)*nstates(3)
                    
                    ! only upper triangular part of matrix 
                    if(ind1 <= ind2) then 
                       
                       Hmatrix(ind1,ind2) = p_elem1(i,l) + p_elem2(j,m) + p_elem3(k,n) &
                            + ( (0.5 + i-1)*omega_h(1) +(0.5 + j-1)*omega_h(2) &
                            + (0.5 + k-1)*omega_h(3) )*hbar*delta(i,l)*delta(j,m)*delta(k,n) 

!
!&
!                            + 0.5*hbar*omega_h(2)*delta(i,l)*delta(k,n) &
!                            + 0.5*hbar*omega_h(3)*delta(i,l)*delta(j,m) 
                       
                       do ii=1,ncols
                          pot1 = q1_vec(ii)+1
                          pot2 = q2_vec(ii)+1
                          pot3 = q3_vec(ii)+1
                          
                          Hmatrix(ind1,ind2)= Hmatrix(ind1,ind2) + &
                               sol(ii)*Mx1(pot1,i,l)*Mx2(pot2,j,m)*Mx3(pot3,k,n)
                       end do
                       
                    end if
                    
                 end do
              end do
           end do
           
           
        end do
     end do
  end do
  


  
  
  ! solve eigenvalue problem
  !*********************************************************************    
  
  ! allocate workvectors for lapack
  allocate( W(nstates3), WORK(3*nstates3))
  
  ! call lapack routine
  call dsyev( "V", "U", nstates3, Hmatrix, nstates3, W, WORK, 3*nstates3, INFO)
  
  ! print eigenvalues and first frequency
  write(6,*) "fundamental frequency", (W(2)-W(1))*cm*hartree
  
  
  ! print the first eigenfunction(s)
  
  !  allocate( eigenfun1(npoints) )
  
  !  do j=1,10
  !     
   !     eigenfun1=0
  !     do i=1,nstates
  !        eigenfun1 = eigenfun1 + Hmatrix(j,i)*eigenfun(:,i)
  !     end do
  !     
  !     do i=1,npoints
  !        write(10+j,*) x_new(i), eigenfun1(i), eigenfun(i,j)
  !     end do
  !     
  !  end do
  
  
  
  
end program vib_normal3
